<?xml version="1.0" encoding="utf-8" ?>
<project name="MbUnit2Tester" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - This follows a convention for testing with Integration tests being separated from Unit tests - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <include buildfile="..${path.separator}csharp.functions" />
  <property name="file.current.no_extension" value="mbunit2.test" />
  <property name="dirs.current" value="${directory::get-current-directory()}" />  
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />  
  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}${path.separator}${folder.build_scripts_custom}${path.separator}analyzers" />
  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}${path.separator}${folder.code_build}" />
  <property name="folder.app.drop" value="${project.name}" overwrite="false" />
  <property name="dirs.build.code" value="${dirs.build}${path.separator}${folder.app.drop}" overwrite="false" />
  <property name="folder.build_artifacts" value="build_artifacts" overwrite="false" />
  <property name="dirs.build_artifacts" value="${path::get-full-path(dirs.build)}${path.separator}${folder.build_artifacts}" />
  <property name="dirs.test_results" value="${dirs.build_artifacts}${path.separator}mbunit2" overwrite="false" />
  <property name="file.test_results" value="mbunit-results" overwrite="false" />
  <property name="is.replaced" value="false" />
  <property name="fail.build.on.error" value="true" />

  <assemblyfileset id="assemblies.assemblyfileset.testing" basedir="${dirs.build.code}${path.separator}" >
    <exclude name="lib${path.separator}**" />
    <exclude name="**${path.separator}*Database*dll" />
    <exclude name="**${path.separator}*.Integration*dll" />
    <exclude name="**${path.separator}TestFu.dll" />
    <include name="**${path.separator}*Test*dll" />
    <include name="**${path.separator}*.Spec*dll" />
  </assemblyfileset>

  <assemblyfileset id="assemblies.assemblyfileset.testing.all" basedir="${dirs.build.code}${path.separator}" >
    <exclude name="lib${path.separator}**" />
    <exclude name="**${path.separator}TestFu.dll" />
    <include name="**${path.separator}*Test*dll" />
    <include name="**${path.separator}*.Spec*dll" />
  </assemblyfileset>

  <target name="go" depends="run_tasks" />

  <target name="run_tasks">
    <echo level="Warning" message="" />
    <echo level="Warning" message="====================" />
    <echo level="Warning" message="${project::get-name()}" />
    <echo level="Warning" message="====================" />
    <call target="prepare" if="${target::exists('prepare')}" />
    <customExtension extends="${project::get-buildfile-path()}" type="pre" failonerror="${fail.build.on.error}" />
    <customExtension extends="${project::get-buildfile-path()}" type="replace" failonerror="${fail.build.on.error}" />
    <call target="run_normal_tasks" if="${not is.replaced}" />
    <customExtension extends="${project::get-buildfile-path()}" type="post" failonerror="${fail.build.on.error}" />
  </target>

  <target name="run_normal_tasks"
          depends="run_tests"
          description="Testing with MbUnit v2." />

  <target name="prepare">
    <echo level="Warning" message="Removing and adding ${dirs.test_results}."/>
    <delete dir="${dirs.test_results}" failonerror="false" />
    <mkdir dir="${dirs.test_results}" />
  </target>

  <target name="run_tests" depends="prepare" description="Running Unit Tests">
    <echo level="Warning" message="Running tests using MbUnit and putting results in ${dirs.test_results}."/>
    <mbunit
        report-types="Html;Xml;Text"
        report-filename-format="${file.test_results}"
        report-output-directory="${dirs.test_results}"
        halt-on-failure="true"
        failonerror="true"
        >
      <assemblies refid="assemblies.assemblyfileset.testing" />
      <categories>
        <exclude name="Database" />
        <exclude name="Integration" />
        <exclude name="Slow" />
        <exclude name="NotWorking" />
        <exclude name="Ignore" />
        <exclude name="database" />
        <exclude name="integration" />
        <exclude name="slow" />
        <exclude name="notworking" />
        <exclude name="ignore" />
      </categories>
    </mbunit>
  </target>

  <target name="run_all_tests" depends="prepare" description="Running All Unit Tests">
    <echo level="Warning" message="Running all tests (including integration tests) using MbUnit and putting results in ${dirs.test_results}."/>
    <mbunit
        report-types="Html;Xml;Text"
        report-filename-format="${file.test_results}"
        report-output-directory="${dirs.test_results}"
        halt-on-failure="true"
        failonerror="true"
        >
      <assemblies refid="assemblies.assemblyfileset.testing.all" />
    </mbunit>
  </target>

  <target name="open_results">
    <echo level="Warning" message="Opening results - ${path::get-full-path(dirs.test_results) + path.separator + file.test_results + '.html'}" />
    <results display="${path::get-full-path(dirs.test_results) + path.separator + file.test_results + '.html'}" /> 
  </target>

</project>