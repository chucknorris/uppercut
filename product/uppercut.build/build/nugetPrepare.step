<?xml version="1.0" encoding="utf-8" ?>
<project name="nugetPrepare" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - Add custom tasks in BuildTasks.Custom folder with file by the same name - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />
  <include buildfile="${dirs.current.file}${path.separator}default.build.settings" />
  <property name="build.step.name" value="${project::get-name()}" />
  <property name="build.step.path" value="${project::get-buildfile-path()}" />
  <!-- build step customizations below this -->

  <property name="pkg.build.date" value="20100801" overwrite="false" />
  <property name="file.nuget.version" value="${dirs.drop.nuget}${path.separator}version.xml" />

  <property name="fail.build.on.error" value="false" />

  <target name="go" depends="run_tasks" if="${run.nuget}" />

  <!-- run_normal_tasks is called from run_tasks unless replace extension exists-->
  <target name="run_normal_tasks"
          depends="prepare, copy_nuget_folder, copy_app_drop_to_lib_folder, copy_docs_to_doc_folder, copy_notices_to_doc_folder, set_file_attributes_to_normal, update_build_date, update_version, update_nuspecs_with_version"
          description="Packaging nuget." />

  <target name="prepare">
    <echo level="Warning" message="Removing and adding ${dirs.drop.nuget}."/>
    <delete dir="${dirs.drop.nuget}" failonerror="false" />
    <mkdir dir="${dirs.drop.nuget}" />
  </target>

  <target name="copy_nuget_folder">
    <echo level="Warning" message="Packaging nuspec specifications and special files from ${dirs.nuget} to ${dirs.drop.nuget}."/>
    <copy todir="${dirs.drop.nuget}">
      <fileset basedir="${dirs.nuget}">
        <include name="**/**" />
      </fileset>
    </copy>
  </target>

  <target name="copy_app_drop_to_lib_folder">
    <echo level="Warning" message="Packaging ${project.name} nuget pieces into ${dirs.drop.nuget}${path.separator}lib from ${dirs.drop}${path.separator}${folder.app.drop}."/>
    <copy todir="${dirs.drop.nuget}${path.separator}lib">
      <fileset basedir="${dirs.drop}${path.separator}${folder.app.drop}">
        <include name="**/**" />
      </fileset>
    </copy>
  </target>

  <target name="copy_docs_to_doc_folder">
    <echo level="Warning" message="Packaging docs to ${dirs.drop.nuget}${path.separator}docs."/>
    <copy todir="${dirs.drop.nuget}${path.separator}docs" failonerror="false">
      <fileset basedir="${dirs.drop}${path.separator}${folder.documentation}">
        <include name="**/**" />
      </fileset>
    </copy>
  </target>

  <target name="copy_notices_to_doc_folder">
    <echo level="Warning" message="Packaging readme file to ${dirs.drop.nuget}${path.separator}docs."/>
    <copy file="${dirs.current}${path.separator}README.md" tofile="${dirs.drop.nuget}${path.separator}docs${path.separator}README" failonerror="false" />

    <echo level="Warning" message="Packaging other legal stuff to ${dirs.drop.nuget}${path.separator}docs."/>
    <copy todir="${dirs.drop.nuget}${path.separator}docs" failonerror="false">
      <fileset basedir="${dirs.drop}${path.separator}LEGAL">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>

  <target name="generate_version_file">
    <echo level="Warning" message="Generating ${file.nuget.version} with ${assembly.version.full} for the version" />
    <echo level="Warning" file="${file.nuget.version}" append="false" failonerror="false">
      <![CDATA[<?xml version="1.0" ?>
<nuget>
  <version>${assembly.version.full}</version>
</nuget>]]>
    </echo>
  </target>

  <target name="set_file_attributes_to_normal">
    <echo level="Warning" message="Removing read only attributes that some source control things put on files in '${dirs.drop.nuget}'." />
    <attrib normal="true" failonerror="false">
      <fileset basedir="${dirs.drop.nuget}">
        <include name="**/*" />
      </fileset>
    </attrib>
  </target>

  <target name="update_build_date">
    <property name="pkg.current.date" value="${datetime::now()}" />
    <property name="pkg.current.date.year" value="${datetime::get-year(pkg.current.date)}" />
    <property name="pkg.current.date.month" value="${datetime::get-month(pkg.current.date)}" />
    <property name="pkg.current.date.month" value="${'0' + pkg.current.date.month}" if="${string::get-length(pkg.current.date.month) == 1}" />
    <property name="pkg.current.date.month" value="${'0' + pkg.current.date.month}" if="${string::get-length(pkg.current.date.month) == 1}" />
    <property name="pkg.current.date.day" value="${datetime::get-day(pkg.current.date)}" />
    <property name="pkg.current.date.day" value="${'0' + pkg.current.date.day}" if="${string::get-length(pkg.current.date.day) == 1}" />
    <property name="pkg.build.date" value="${'' + pkg.current.date.year + pkg.current.date.month + pkg.current.date.day}" />
  </target>

  <target name="update_version">
    <property name="nuget.version" value="${nuget.version + '-' + version.nuget.prerelease}" if="${version.nuget.prerelease != ''}" />
    <property name="nuget.version" value="${nuget.version + '.' + pkg.build.date}" if="${version.use.build_date and version.use_semanticversioning and version.nuget.prerelease == ''}" />
    <property name="nuget.version" value="${nuget.version + '-' + pkg.build.date}" if="${version.use.build_date and version.nuget.prerelease != ''}" />
    <!-- version.use.build_date -->
    <echo level="Warning" message="Using ${nuget.version} as the version for the nuget package(s)." />
  </target>

  <target name="update_nuspecs_with_version">
    <echo level="Warning" message="Finding and updating version in all nuspec files in ${dirs.drop.nuget}."/>
    <foreach item="File" property="spec.file">
      <in>
        <items>
          <include name="${dirs.drop.nuget}${path.separator}**${path.separator}*.nuspec" />
        </items>
      </in>
      <do>
        <echo level="Warning" message="Replacing version in '${spec.file}'" />
        <xmlpoke
          file="${spec.file}"
          xpath="/package/metadata/version"
          value="${nuget.version}" />
      </do>
    </foreach>
  </target>

</project>
