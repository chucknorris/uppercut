<?xml version="1.0" encoding="utf-8" ?>
<project name="OpenCover" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - OpenCover uses NUnit to run tests - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />
  <include buildfile="${dirs.current.file}${path.separator}..${path.separator}default.build.settings" />
  <property name="build.step.name" value="${project::get-name()}" />
  <property name="build.step.path" value="${project::get-buildfile-path()}" />
  <!-- build step customizations below this -->

  <property name="file.opencover_log" value="${dirs.codecoverage_results}${path.separator}${project.name}.opencover.log" />
  <property name="dir.xml.code_coverage_results" value="${dirs.codecoverage_results}${path.separator}Xml" />
  <property name="dir.html.code_coverage_results" value="${dirs.codecoverage_results}${path.separator}Html" />
  <property name="file.xml.code_coverage_results" value="${project.name}.CodeCoverageSummary-results.xml" />
  <property name="file.html.code_coverage_results" value="${project.name}.CodeCoverageSummary-results.html" />
  <property name="test.args" value="" />
  <property name="test.args" value="/rt:Text /rnf:mbUnit /rf:&quot;${dirs.codecoverage_results}&quot; /ec:${tests.excluded_categories.comma_separated}" if="${test.framework=='mbunit2'}" />
  <property name="test.args" value="/xml:&quot;${dirs.codecoverage_results}${path.separator}nunit-results.xml&quot; /nologo /framework=${microsoft.framework} /exclude:${tests.excluded_categories.comma_separated}" if="${test.framework=='nunit'}" />
  <!--property name="test.args" value="/xml:&quot;${dirs.codecoverage_results}\nunit-results.xml&quot; /nologo /framework=${microsoft.framework} /exclude:${tests.excluded_categories.comma_separated}" if="${test.framework=='nunit'}" /-->

  <property name="fail.build.on.error" value="false" />
  <property name="dlls.test" value="" />
  <property name="app.opencover.filters" value="+[${project.name}*]* -[${project.name}*test*]*"  overwrite="false" />

  <target name="go" depends="run_tasks" />

  <!-- run_normal_tasks is called from run_tasks unless replace extension exists -->
  <target name="run_normal_tasks"
          depends="get_test_dlls, opencover, report_generator"
          description="Using OpenCover to Analyze project for test quality indicators."
           if="${run.codecoverage and cover.framework == 'opencover' and file::exists(app.codecoverage)}">
    <echo level="Warning" message="OpenCover/ReportGenerator doesn't work on Mono." if="${platform::is-unix()}" />
  </target>

  <target name="prepare">
    <echo level="Warning" message="Removing and adding ${dirs.codecoverage_results}."/>
    <delete dir="${dirs.codecoverage_results}" failonerror="false" />
    <mkdir dir="${dirs.codecoverage_results}" />
  </target>

  <target name="get_test_dlls" if="${platform::is-windows()}">
    <echo level="Warning" message="Getting test dlls based on name in directory ${path::get-full-path(dirs.build.code)}." />
    <property name="dll.names" value="" />
    <foreach item="File" property="dll.filename">
      <in>
        <items>
          <exclude name="${dirs.build.code}/lib/**" />
          <exclude name="${dirs.build.code}/_PublishedApplications/**" />
          <exclude name="${dirs.build.code}/**/*Database*dll" />
          <exclude name="${dirs.build.code}/**/*database*dll" />
          <exclude name="${dirs.build.code}/**/*.Integration*dll" />
          <exclude name="${dirs.build.code}/**/*.integration*dll" />
          <exclude name="${dirs.build.code}/**/TestFu.dll" />
          <include name="${dirs.build.code}/**/*Test*dll" />
          <include name="${dirs.build.code}/**/*test*dll" />
          <include name="${dirs.build.code}/**/*Spec*dll" />
          <include name="${dirs.build.code}/**/*spec*dll" />
        </items>
      </in>
      <do>
        <property name="dll.names" value="${dll.names + ' ' + string::replace(string::replace(dll.filename,path::get-full-path(dirs.build.code) + '\',''),'\',path.separator) + ''}" />
      </do>
    </foreach>

    <property name="dlls.test" value="${dll.names}" />

    <echo level="Warning" message="No test dlls to run against" if="${dlls.test == ''}" />
    <echo level="Warning" message="Running OpenCover against these test dlls - ${dlls.test}" unless="${dlls.test == ''}" />

    <property name="args.test_runner" value="${dlls.test} ${test.args}" />
  </target>

  <!-- tofix: OpenCover does not work with in Mono -->
  <target name="opencover" if="${platform::is-windows() and file::exists(app.codecoverage) and file::exists(app.test.console) and dlls.test != ''}">
    <echo level="Warning" message="Attempting to run OpenCover. Creating file at ${file.codecoverage_results} and logging at ${file.opencover_log}." />

    <exec program="regsvr32.exe"
      verbose="true"
      if="${platform::is-windows()}">
      <arg value="/s" />
      <arg value="/n" />
      <arg value="/i:user" />
      <arg>
        <path>
          <pathelement file="${path::get-directory-name(app.codecoverage)}${path.separator}x64${path.separator}OpenCover.Profiler.dll" />
        </path>
      </arg>
    </exec>

    <echo level="Warning" message="Running ${app.codecoverage} -target:'${app.test.console}' -targetdir:'${dirs.build.code}' -targetargs:'${dll.names}' -filter:'${codecoverage.filters}' -output:'${dirs.codecoverage_results}${path.separator}${file.codecoverage_results}' -log:All -skipautoprops" />
    <exec program="${app.codecoverage}"
          workingdir="${dirs.build.code}"
          failonerror="${fail.build.on.error}"
          if="${platform::is-windows()}"
          >
      <arg value='-target:"${app.test.console}"' />
      <arg value='-targetdir:"${dirs.build.code}"' />
      <arg value='-targetargs:"${dll.names}"' />
      <arg value='-filter:"${codecoverage.filters}"' />
      <arg value='-output:"${dirs.codecoverage_results}${path.separator}${file.codecoverage_results}"' />
      <arg value='-log:All' />
      <arg value='-skipautoprops' />
    </exec>
    <exec program="mono"
          workingdir="${dirs.build.code}"
          failonerror="${fail.build.on.error}"
          if="${platform::is-unix()}"
          >
      <arg value='"${app.codecoverage}"' />
      <arg value='-target:"${app.test.console}"' />
      <arg value='-targetdir:"${dirs.build.code}"' />
      <arg value='-targetargs:"${dll.names}"' />
      <arg value='-filter:"${codecoverage.filters}"' />
      <arg value='-output:"${dirs.codecoverage_results}${path.separator}${file.codecoverage_results}"' />
      <arg value='-log:All' />
      <arg value='-skipautoprops' />
    </exec>
  </target>

  <!-- tofix: ReportGenerator does not work with in Mono -->
  <target name="report_generator" depends="opencover" if="${platform::is-windows() and file::exists(app.codecoverage.explorer)}">
    <echo level="Warning" message="Attempting to run ReportGenerator. Creating HTML results file at ${file.html.code_coverage_results} and XML results file at ${file.xml.code_coverage_results}." />
    <exec program="${app.codecoverage.explorer}"
          workingdir="${dirs.build.code}"
          failonerror="false"
          if="${platform::is-windows()}"
          >
      <arg value='${dirs.codecoverage_results}${path.separator}${file.codecoverage_results}' />
      <arg value="${dir.html.code_coverage_results}" />
      <arg value="HtmlSummary" />
    </exec>
    <exec program="mono"
          workingdir="${dirs.build.code}"
          failonerror="false"
          if="${platform::is-unix()}"
          >
      <arg value='"${app.codecoverage.explorer}"' />
      <arg value='${dirs.codecoverage_results}${path.separator}${file.codecoverage_results}' />
      <arg value="${dir.html.code_coverage_results}" />
      <arg value="HtmlSummary" />
    </exec>
  </target>

  <target name="open_results">
    <echo level="Warning" message="Opening results - ${path::get-full-path(dirs.codecoverage_results) + path.separator + file.html.code_coverage_results}" />
    <results display="${path::get-full-path(dirs.codecoverage_results) + path.separator + file.html.code_coverage_results}" />
  </target>

</project>
