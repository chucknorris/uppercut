<?xml version="1.0" encoding="utf-8" ?>
<project name="HGVersioner" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - This creates the assembly file to be used by the rest of the application - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />
  <include buildfile="${dirs.current.file}${path.separator}..${path.separator}default.build.settings" />
  <property name="build.step.name" value="${project::get-name()}" />
  <property name="build.step.path" value="${project::get-buildfile-path()}" />
  <!-- build step customizations below this -->

  <property name="fail.build.on.error" value="false" />

  <target name="go" depends="run_tasks" />

  <!-- run_normal_tasks is called from run_tasks unless replace extension exists -->
  <target name="run_normal_tasks"
          depends="get_revision, get_externally_provided_revision, set_version_environment_variable"
          description="Generating Assembly File." />

  <target name="get_revision">
    <echo level="Warning" message="Getting revision number from working directory '${dirs.current}' or remotely at ${repository.path}."/>
    <!-- try to update the revision -->
    <getVersionFromMercurial
      hgExecutableWithPath="hg"
      repoDirectory="${dirs.current}"
      repoPath="${repository.path}"
      output="_revision.xml"
      failonerror="false"
      />
    <xmlpeek
      file="_revision.xml"
      xpath="/version/revision"
      property="version.revision"
      failonerror="false"/>
    <xmlpeek
      file="_revision.xml"
      xpath="/version/hash"
      property="version.hash"
      failonerror="false"/>
    <delete file="_revision.xml" failonerror="false" />
  </target>

  <target name="get_externally_provided_revision">
    <property name="version.hash" value="${environment::get-variable('BUILD_VCS_NUMBER')}" if="${version.hash == '' and environment::variable-exists('BUILD_VCS_NUMBER')}" />
  </target>

  <target name="set_version_environment_variable">
    <setenv name="uc.app.revision" value="${version.revision}"/>
    <setenv name="uc.app.revision.hash" value="${version.hash}"/>
  </target>

</project>
