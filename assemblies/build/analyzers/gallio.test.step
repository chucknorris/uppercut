<?xml version="1.0" encoding="utf-8" ?>
<project name="GallioTester" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - This follows a convention for testing with Integration tests being separated from Unit tests - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <include buildfile="..${path.separator}csharp.functions" />
  <property name="file.current.no_extension" value="gallio.test" />
  <property name="dirs.current" value="${directory::get-current-directory()}" />
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />  
  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}${path.separator}${folder.build_scripts_custom}${path.separator}analyzers" />
  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}${path.separator}${folder.code_build}" />
  <property name="folder.app.drop" value="${project.name}" overwrite="false" />
  <property name="dirs.build.code" value="${dirs.build}${path.separator}${folder.app.drop}" overwrite="false" />
  <property name="folder.build_artifacts" value="build_artifacts" overwrite="false" />
  <property name="dirs.build_artifacts" value="${path::get-full-path(dirs.build)}${path.separator}${folder.build_artifacts}" />
  <property name="dirs.test_results" value="${dirs.build_artifacts}${path.separator}gallio" overwrite="false" />
  <property name="file.test_results" value="gallio-results" overwrite="false" />
  <property name="time.limit.in.seconds" value="240" />
  
  <property name="is.replaced" value="false" />
  <property name="fail.build.on.error" value="true" />

  <target name="go" depends="run_tasks" />

  <target name="run_tasks">
    <echo level="Warning" message="" />
    <echo level="Warning" message="====================" />
    <echo level="Warning" message="${project::get-name()}" />
    <echo level="Warning" message="====================" />
    <call target="prepare" if="${target::exists('prepare')}" />
    <customExtension extends="${project::get-buildfile-path()}" type="pre" failonerror="${fail.build.on.error}" />
    <customExtension extends="${project::get-buildfile-path()}" type="replace" failonerror="${fail.build.on.error}" />
    <call target="run_normal_tasks" if="${not is.replaced}" />
    <customExtension extends="${project::get-buildfile-path()}" type="post" failonerror="${fail.build.on.error}" />
  </target>

  <target name="run_normal_tasks"
          depends="run_tests"
          description="Testing with Gallio." />

  <target name="prepare">
    <echo level="Warning" message="Removing and adding ${dirs.test_results}."/>
    <delete dir="${dirs.test_results}" failonerror="false" />
    <mkdir dir="${dirs.test_results}" />
  </target>

  <target name="load_tasks">
    <echo level="Warning" message="Loading Gallio Nant Tasks from Program Files." />
    <loadtasks assembly="C:${path.separator}Program Files (x86)${path.separator}Gallio${path.separator}bin${path.separator}Gallio.NAntTasks.dll" if="${file::exists('C:' + path.separator + 'Program Files (x86)' + path.separator + 'Gallio' + path.separator + 'bin' + path.separator + 'Gallio.NAntTasks.dll')}" />
    <loadtasks assembly="C:${path.separator}Program Files${path.separator}Gallio${path.separator}bin${path.separator}Gallio.NAntTasks.dll" if="${file::exists('C:' + path.separator + 'Program Files' + path.separator + 'Gallio' + path.separator + 'bin' + path.separator + 'Gallio.NAntTasks.dll')}" />
  </target>

  <target name="run_tests" depends="prepare,load_tasks" description="Running Unit Tests">
    <echo level="Warning" message="Running tests using Gallio and putting results in ${dirs.test_results}."/>
    <gallio working-directory="${dirs.build}"
            report-types="Html;Xml;Text"
            report-directory="${dirs.test_results}"
            report-name-format="${file.test_results}"
            show-reports="false"
            failonerror="true"
            verbosity="Normal"
            echo-results="true"
            run-time-limit="${time.limit.in.seconds}"
            filter="exclude Category:Database or Category:Integration or Category:Slow or Category:NotWorking or Categroy:Ignore or Category:database or Category:integration or Category:slow or Category:notworking or Categroy:ignore"
            >
      <files>
        <exclude name="${dirs.build.code}${path.separator}lib${path.separator}**" />
        <exclude name="${dirs.build.code}${path.separator}**${path.separator}*Database*dll" />
        <exclude name="${dirs.build.code}${path.separator}**${path.separator}*.Integration*dll" />
        <exclude name="${dirs.build.code}${path.separator}**${path.separator}TestFu.dll" />
        <include name="${dirs.build.code}${path.separator}**${path.separator}*Test*dll" />
        <include name="${dirs.build.code}${path.separator}**${path.separator}*.Spec*dll" />
      </files>
    </gallio>
  </target>

  <target name="run_all_tests" depends="prepare,load_tasks" description="Running All Unit Tests">
    <echo level="Warning" message="Running all tests (including integration tests) using Gallio and putting results in ${dirs.test_results}."/>
    <gallio working-directory="${dirs.build}"
            report-types="Html;Xml;Text"
            report-directory="${dirs.test_results}"
            report-name-format="${file.test_results}"
            show-reports="false"
            failonerror="true"
            verbosity="Normal"
            echo-results="true"
            run-time-limit="${time.limit.in.seconds}"
            >
      <files>
        <exclude name="${dirs.build.code}${path.separator}lib${path.separator}**" />
        <exclude name="${dirs.build.code}${path.separator}**${path.separator}TestFu.dll" />
        <include name="${dirs.build.code}${path.separator}**${path.separator}*Test*dll" />
        <include name="${dirs.build.code}${path.separator}**${path.separator}*.Spec*dll" />
      </files>
    </gallio>
  </target>

  <target name="open_results">
    <echo level="Warning" message="Opening results - ${path::get-full-path(dirs.test_results) + path.separator + file.test_results + '.html'}" />
    <results display="${path::get-full-path(dirs.test_results) + path.separator + file.test_results + '.html'}" />
  </target>

</project>