<?xml version="1.0" encoding="utf-8" ?>
<project name="Obfuscator" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - This creates the assembly file to be used by the rest of the application - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <property name="file.current.no_extension" value="obfuscate" />
  <property name="dirs.current" value="${directory::get-current-directory()}" />
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />  
  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}${path.separator}${folder.build_scripts_custom}" />
  <property name="folder.references" value="lib" overwrite="false" />
  <property name="dirs.lib" value="${dirs.current}${path.separator}${folder.references}" overwrite="false" />
  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}${path.separator}${folder.code_build}" />
  <property name="project.name" value="__SOLUTION_NAME_WITHOUT_SLN_EXTENSION__" overwrite="false" />
  <property name="company.name" value="__COMPANY_NAME__" overwrite="false" />
  <property name="path_to_solution" value="." overwrite="false" />
  <property name="folder.app.drop" value="${project.name}" overwrite="false" />
  <property name="dirs.build.code" value="${dirs.build}${path.separator}${folder.app.drop}" overwrite="false" />

  <property name="version.use_semanticversioning" value="false" overwrite="false" />
  <property name="version.major" value="1" overwrite="false" />
  <property name="version.minor" value="0" overwrite="false" />
  <property name="version.patch" value="0" overwrite="false" />
  <property name="version.build" value="0" overwrite="false" />
  <property name="version.revision" value="0" overwrite="false" />
  <property name="version.hash" value="${version.revision}" overwrite="false" />
  <property name="version" value="${version.major}.${version.minor}.${version.build}.${version.revision}" />
  <property name="version" value="${version.major}.${version.minor}.${version.patch}.0" if="${version.use_semanticversioning}" />
  <property name="version.file" value="${version}" overwrite="false" />

  <property name="sign.project_with_key" value="false" overwrite="false" />
  <property name="sign.key.use_relative_pathing" value="false" overwrite="false" />
  <property name="file.key.name.private" value="${dirs.current}${path.separator}${project.name}.snk" overwrite="false" />
  <property name="file.key.name.private" value="${project.name}.snk" overwrite="false" if="${sign.key.use_relative_pathing}" />
  <property name="obsfucate" value="false" overwrite="false" />
  <property name="app.eazfuscator" value="..${path.separator}${folder.references}${path.separator}Eazfuscator.NET${path.separator}Eazfuscator.NET.exe" overwrite="false" />
  <property name="args.obfuscator" value="" overwrite="false" />
  
  <property name="dll.names" value="" />

  <property name="is.replaced" value="false" />
  <property name="fail.build.on.error" value="true" />

  <target name="go" depends="run_tasks" />

  <target name="run_tasks">
    <echo level="Warning" message="" />
    <echo level="Warning" message="====================" />
    <echo level="Warning" message="${project::get-name()}" />
    <echo level="Warning" message="====================" />
    <call target="prepare" if="${target::exists('prepare')}" />
    <customExtension extends="${project::get-buildfile-path()}" type="pre" failonerror="${fail.build.on.error}" />
    <customExtension extends="${project::get-buildfile-path()}" type="replace" failonerror="${fail.build.on.error}" />
    <call target="run_normal_tasks" if="${not is.replaced}" />
    <customExtension extends="${project::get-buildfile-path()}" type="post" failonerror="${fail.build.on.error}" />
  </target>

  <target name="run_normal_tasks"
          depends="error_check, get_version, get_project_output_files, set_up_args, obfuscate"
          description="Generating Assembly File." />

  <target name="error_check">
    <fail message="You must fill out the project.name, repository.path, and company.name settings in the settings${path.separator}UppercuT.config file. Please do that and retry the build."
      if="${project.name=='__SOLUTION_NAME_WITHOUT_SLN_EXTENSION__' or company.name=='__COMPANY_NAME__'}" />
  </target>

  <target name="get_version">
    <property name="version.file" value="${version.major}.${version.minor}.${version.build}.${version.revision}" />
    <property name="version.file" value="${version.major}.${version.minor}.${version.patch}.${version.build}" if="${version.use_semanticversioning}" />
  </target>
  
  <target name="get_project_output_files">
    <echo level="Warning" message="Getting all files with '${version.file}' as the file version." />
    <foreach item="File" property="dll.filename">
      <in>
        <items>
          <include name="${dirs.build.code}${path.separator}**${path.separator}*" />
        </items>
      </in>
      <do>
        <!--echo message="${dll.filename + ' - ' + version::to-string(fileversioninfo::get-file-version(fileversioninfo::get-version-info(dll.filename)))}" /-->
        <property name="dll.names" value="${dll.names + ' ' + string::replace(string::replace(dll.filename,path::get-full-path(dirs.build.code) + '\',''),'\',path.separator) + ''}" if="${version::to-string(fileversioninfo::get-file-version(fileversioninfo::get-version-info(dll.filename))) == version.file}" />
      </do>
    </foreach>
  </target>
  
  <target name="set_up_args">
    <property name="args.obfuscator" value="${args.obfuscator + ' -k ' + file.key.name.private}" if="${sign.project_with_key}" />
    <property name="args.obfuscator" value="${args.obfuscator + ' ' + dll.names}" />
  </target>

  <target name="obfuscate">
    <echo level="Warning" message="Attempting to obsfucate using Eazfuscator.NET with these arguments: ${path::get-full-path(app.eazfuscator)} ${args.obfuscator}" />
    <exec
      program="${path::get-full-path(app.eazfuscator)}"
      workingdir="${dirs.build.code}"
      commandline="${args.obfuscator}"
      if="${file::exists(path::get-full-path(app.eazfuscator))}" />
  </target>

</project>