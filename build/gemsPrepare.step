<?xml version="1.0" encoding="utf-8" ?>
<project name="GemsPrepare" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - Add custom tasks in BuildTasks.Custom folder with file by the same name - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <property name="file.current.no_extension" value="gemsPrepare" />
  <property name="dirs.current" value="${directory::get-current-directory()}" />
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />  
  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}${path.separator}${folder.build_scripts_custom}" />
  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}${path.separator}${folder.code_build}" />
  <property name="folder.code_drop" value="code_drop" overwrite="false" />
  <property name="dirs.drop" value="${dirs.current}${path.separator}${folder.code_drop}" overwrite="false" />
  <property name="folder.build_artifacts" value="build_artifacts" overwrite="false" />
  <property name="folder.app.drop" value="${project.name}" overwrite="false" />
  <property name="folder.database" value="__DATABASE_FOLDER_NAME__" overwrite="false" />
  <property name="folder.reports" value="${project.name}.Reports" overwrite="false" />
  <property name="folder.file_server" value="file.server" overwrite="false" />
  <property name="folder.environment_files" value="environment.files" overwrite="false" />
  <property name="folder.deployment" value="deployment" overwrite="false" />
  <property name="folder.settings" value="settings" overwrite="false" />
  <property name="folder.documentation" value="docs" overwrite="false" />
  <property name="folder.gems" value="gems" overwrite="false" />
  <property name="dirs.gems" value="${dirs.current}${path.separator}${folder.gems}" overwrite="false" />
  <property name="dirs.drop.gems" value="${dirs.drop}${path.separator}${folder.gems}" overwrite="false" />
  <property name="folder.gems.exists" value="${directory::exists(dirs.gems)}" />
  <property name="version.use_semanticversioning" value="false" overwrite="false" />
  <property name="version.major" value="1" overwrite="false" />
  <property name="version.minor" value="0" overwrite="false" />
  <property name="version.patch" value="0" overwrite="false" />
  <property name="version.build" value="0" overwrite="false" />
  <property name="version.revision" value="0" overwrite="false" />
  <property name="assembly.version.full" value="${version.major}.${version.minor}.${version.build}.${version.revision}" />
  <property name="assembly.version.full" value="${version.major}.${version.minor}.${version.patch}.0"  if="${version.use_semanticversioning}" />
  <property name="version.gem.suffix" value="" overwrite="false" />
  <property name="use.gem.build_date" value="false" overwrite="false" />
  <property name="gem.build.date" value="20100801" overwrite="false" />
  <property name="file.gems.version" value="${dirs.drop.gems}${path.separator}VERSION" />
  
  <property name="is.replaced" value="false" />
  <property name="fail.build.on.error" value="false" />

  <target name="go" depends="run_tasks" if="${folder.gems.exists}" />

  <target name="run_tasks" if="${folder.gems.exists}">
    <echo level="Warning" message="" />
    <echo level="Warning" message="====================" />
    <echo level="Warning" message="${project::get-name()}" />
    <echo level="Warning" message="====================" />
    <customExtension extends="${project::get-buildfile-path()}" type="pre" failonerror="${fail.build.on.error}" />
    <customExtension extends="${project::get-buildfile-path()}" type="replace" failonerror="${fail.build.on.error}" />
    <call target="run_normal_tasks" if="${not is.replaced}" />
    <customExtension extends="${project::get-buildfile-path()}" type="post" failonerror="${fail.build.on.error}" />
  </target>

  <target name="run_normal_tasks"
          depends="prepare, copy_gems_folder, copy_app_drop_to_lib_folder, copy_docs_to_doc_folder, copy_notices_to_doc_folder, update_gem_build_date, generate_version_file"
          description="Packaging gems." />

  <target name="prepare">
    <echo level="Warning" message="Removing and adding ${dirs.drop.gems}."/>
    <delete dir="${dirs.drop.gems}" failonerror="false" />
    <mkdir dir="${dirs.drop.gems}" />
  </target>

  <target name="copy_gems_folder">
    <echo level="Warning" message="Packaging gem specifications and special files from ${dirs.gems} to ${dirs.drop.gems}."/>
    <copy todir="${dirs.drop.gems}">
      <fileset basedir="${dirs.gems}">
        <include name="**/**" />
      </fileset>
    </copy>
  </target>
  
  <target name="copy_app_drop_to_lib_folder">
    <echo level="Warning" message="Packaging application gem pieces into ${dirs.drop.gems}${path.separator}lib from ${dirs.drop}${path.separator}${folder.app.drop}."/>
    <copy todir="${dirs.drop.gems}${path.separator}lib">
      <fileset basedir="${dirs.drop}${path.separator}${folder.app.drop}">
        <include name="**/**" />
      </fileset>
    </copy>
  </target>
  
  <target name="copy_docs_to_doc_folder">
    <echo level="Warning" message="Packaging docs to ${dirs.drop.gems}${path.separator}docs."/>
    <copy todir="${dirs.drop.gems}${path.separator}docs" failonerror="false">
      <fileset basedir="${dirs.drop}${path.separator}${folder.documentation}">
        <include name="**/**" />
      </fileset>
    </copy>
  </target>
  
  <target name="copy_notices_to_doc_folder">
    <echo level="Warning" message="Packaging readme file to ${dirs.drop.gems}${path.separator}docs."/>
    <copy file="${dirs.current}README.markdown" tofile="${dirs.drop.gems}${path.separator}docs${path.separator}README" failonerror="false" />
    
    <echo level="Warning" message="Packaging other legal stuff to ${dirs.drop.gems}${path.separator}docs."/>
    <copy todir="${dirs.drop.gems}${path.separator}docs" failonerror="false">
      <fileset basedir="${dirs.drop}${path.separator}LEGAL">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>

  <target name="update_gem_build_date">
    <property name="gem.current.date" value="${datetime::now()}" />
    <property name="gem.current.date.year" value="${datetime::get-year(gem.current.date)}" />
    <property name="gem.current.date.month" value="${datetime::get-month(gem.current.date)}" />
    <property name="gem.current.date.month" value="${'0' + gem.current.date.month}" if="${string::get-length(gem.current.date.month) == 1}" />
    <property name="gem.current.date.month" value="${'0' + gem.current.date.month}" if="${string::get-length(gem.current.date.month) == 1}" />
    <property name="gem.current.date.day" value="${datetime::get-day(gem.current.date)}" />
    <property name="gem.current.date.day" value="${'0' + gem.current.date.day}" if="${string::get-length(gem.current.date.day) == 1}" />
    <property name="gem.build.date" value="${'' + gem.current.date.year + gem.current.date.month + gem.current.date.day}" />
  </target>
  
  <target name="generate_version_file">
    <echo level="Warning" message="Generating ${file.gems.version} with ${assembly.version.full}${version.gem.suffix} for the version" if="${not use.gem.build_date}" />
    <echo level="Warning" file="${file.gems.version}" if="${not use.gem.build_date}" append="false" failonerror="false">${assembly.version.full}${version.gem.suffix}</echo>
    <echo level="Warning" message="Generating ${file.gems.version} with ${assembly.version.full}.${gem.build.date}${version.gem.suffix} for the version" if="${use.gem.build_date}" />
    <echo level="Warning" file="${file.gems.version}" if="${use.gem.build_date}" append="false" failonerror="false">${assembly.version.full}.${gem.build.date}${version.gem.suffix}</echo>
  </target>
  
</project>